package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class TestApplication {

	public static void main(String[] args) {
		SpringApplication.run(TestApplication.class, args);
	}
	// 캐릭터들이 살만한 꽃동네를 생성(스프링 빌리지)
	//  -> 주민 한명 입주(급하냥)
	// 급하냥의 역할 : 마을의 입구에서 방문객들의 요청을 가장먼저 받아 처리하는 역할
	//   -> 컨트롤러를 좀 돌려얘기해봄
	
	// 시나리오
	// 방문객이 옴.(http://localhost:8080/test1)
	// 마을 입구에서 이것을 확인한 급하냥은 즉시 요청을 접수.
	// 성격이 급한 급하냥은 신속하게 처리하기 위해 미리 준비해둔 test.html을
	// 방문객에게 보여줌(view단 호출)
	// 방문객은 응답으로 test.html파일을 볼수 있음
	
	// 시나리오2
	// 생각보다 스프링빌리지에 방문객이 많아졌음
	// 방문객들이 많아지다 보니 서로 소식을 전할 주민 게시판 요청이 들어옴.
	// 급하냥(컨트롤러)의 업무부담 증가.
	//  -> 급하냥 혼자서 게시판을 만들고 관리하려니까 너무 힘듬.
	//  -> 환영인사에만 집중하고 글을 받아서 내용을 분석하고 창고에 안전하게
	//      보관하는 일까지 하기위한 전문가를 초빙.
	
	// 급하냥은 자신의 일을 도와줄 두명의 전문가 친구를 초빙.
	// 와플곰 : 요청의 핵심을 파악하고 실질적인 업무를 처리하는 서비스 전문가(@Service)
	// 카피바라 : 데이터를 창고에 안전하게 보관하고 꺼내오는 담당자
	//   -> DB에 안전하게 보관하고 꺼내오는 데이터 전문가.
	
	// 사실 이 모든일들은 급하냥(컨트롤러)이 혼자 처리하는거 가능.
	//  -> 하지만 급하냥, 와플곰, 카피바라가 각자 영역들을 문제없이 처리해 준다면
	//     더 효율적인 업무처리가 가능.
	
	//  -> 어디든 운영을 할때 덩치(체급)이 커지면 관리자, 실무자 등등 구분하는것처럼
	//     스프링에서도 컨트롤러 서비스 db 등을 각자 분할하여 처리.


	// 시나리오 3
	// 페이지 상세보기, 게시글 수정, 삭제
	// 급하냥(컨트롤러)이 여태껏 보여줬던 건 게시글 전체 내용임
	// -> 정해진 주소로 오는 요청만 처리
	// 상세보기 기능 구현 : 
	// -> URL에 포함된 숫자를 정확히 파악해서 와플곰(서비스단)에게 넘겨줄 것
	// 
	
	
}